package ru.itsjava.strings;

public class StringPractice {
    public static void main(String[] args) {
        String str = new String("Test"); // создаём новую строку;
        String str1 = "Test tst test"; // создаем новую строку с проверкой в пуле строк;
        str.equals("Test"); // сравниваем строки;
        System.out.println(str + " test" ); // конкатенация строк, добавляем к строке новую часть, возвращает новую строку;
        str.intern(); // добавляет строку в пул строк;
        str.compareTo("Test"); // Сравнивает строки лексекографически, возвращает 0 если значения равны или - 1 если значение не равны.
        str.getBytes(); // кодирует строку в массив байт. Сперва конвертирует в чар и затем каждый чар по отдельности конвертирует в байт, заполняет массив байт;
        str.toLowerCase(); // конвертирует символы верхнего регистра в нижний, можно указать правила конвертации для региона.
        str.toUpperCase(); // конвертирует символы нижнего регистра в верхний, можно указать правила конвертации для региона.
        str.contains("te"); // поиск набора символов в строке с учетом регистра и последовательности. Возвращает true или false.
        str.length(); //  возвращает количество символов в строке;
        str.hashCode(); // возвращает целое число рассчитанное формуле s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1];
        str.toString(); // возвращает строку содержащуюся в объекте str;
        str.charAt(1); // возвращает символ по индексу;
        str.chars(); // преобразует строку в stream чаров, далее работа со стримами;
        str.codePointAt(1); // возвращает целочисленное значение чара по индексу символа в строке;
        str.codePointBefore(2); //возвращает целочисленное значение чара символа предстоящего перед переданным индексом;
        str1.codePointCount(3, 9); // возвращает количество символов в периоде;
        str.codePoints(); // возвращает стрим чаров в целочисленном выражении;
        str.compareToIgnoreCase("T"); // compareTo но без учера регистра;
        str.contentEquals("Test"); // contains c возможностью передавать объект типа StringBuffer;
        str.endsWith("Test"); //поиск суффикса в строке, возврощает true если суфикс найден, если суфикс равен строке и при пустой строке иначе false
        str.equalsIgnoreCase("test"); //equals игнорирует регистр;
        str.getChars(1,3, new char[5],0);// копирует символы из диапазона в целевой массив чаров с указанием индеса начала заполнения массива.
        str.indexOf(84); // производит поиск по числовому значению символа и возврощает индекс первого найденного совпадения или -1 если ненашел;
        str.indexOf('T'); // производит поиск по значению символа и возврощает индекс первого найденного совпадения или -1 если ненашел;
        str.indexOf("es"); // возвращает индекс первого символа первого совпадения переданной строки;
        str.indexOf("es",3); //возвращает индекс первого символа первого совпадения переданной строки начиная поиск с указанного симовла;
        str.indexOf('е',3); //производит поиск по значению символа начиная с указанного индекса и возврощает индекс первого найденного совпадения или -1 если ненашел;
        str.isBlank(); //возвращает true если строка пустая, игнорирует пробелы и точки;
        str.isEmpty(); // возврощает true если строка пустая, длина строки 0;
        str.lastIndexOf(1); //indexOf поиск с конца;
        str.concat("7"); // возвращает новую строку с добаленной строкой.
        str.lines(); // возвращает поток строк, разделенных разделителями строк;
        str.matches("/"); // проверяет соответствие регулярного выражения;
        str.offsetByCodePoints(1,2); // возврощает индекс символа который смещен от переданного индекса на колличество символов;

    }

}
